// Code generated by Kitex v0.7.2. DO NOT EDIT.

package user

import (
	"bytes"
	"fmt"
	"reflect"
	"strings"

	"github.com/apache/thrift/lib/go/thrift"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = thrift.TProtocol(nil)
)

type ProxyServiceGetUserArgs struct {
	Req *Request `thrift:"req,1" frugal:"1,default,Request" json:"req"`
}

func NewProxyServiceGetUserArgs() *ProxyServiceGetUserArgs {
	return &ProxyServiceGetUserArgs{}
}

func (p *ProxyServiceGetUserArgs) InitDefault() {
	*p = ProxyServiceGetUserArgs{}
}

var ProxyServiceGetUserArgs_Req_DEFAULT *Request

func (p *ProxyServiceGetUserArgs) GetReq() (v *Request) {
	if !p.IsSetReq() {
		return ProxyServiceGetUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProxyServiceGetUserArgs) SetReq(val *Request) {
	p.Req = val
}

func (p *ProxyServiceGetUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProxyServiceGetUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProxyServiceGetUserArgs(%+v)", *p)
}
func (p *ProxyServiceGetUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProxyServiceGetUserResult struct {
	Success *User `thrift:"success,0,optional" frugal:"0,optional,User" json:"success,omitempty"`
}

func NewProxyServiceGetUserResult() *ProxyServiceGetUserResult {
	return &ProxyServiceGetUserResult{}
}

func (p *ProxyServiceGetUserResult) InitDefault() {
	*p = ProxyServiceGetUserResult{}
}

var ProxyServiceGetUserResult_Success_DEFAULT *User

func (p *ProxyServiceGetUserResult) GetSuccess() (v *User) {
	if !p.IsSetSuccess() {
		return ProxyServiceGetUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProxyServiceGetUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*User)
}

func (p *ProxyServiceGetUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProxyServiceGetUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProxyServiceGetUserResult(%+v)", *p)
}
func (p *ProxyServiceGetUserResult) GetResult() interface{} {
	return p.Success
}
